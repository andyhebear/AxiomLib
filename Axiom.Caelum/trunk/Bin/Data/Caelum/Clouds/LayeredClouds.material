//
// This file is part of Caelum for NeoAxis Engine.
// Caelum for NeoAxisEngine is a Caelum's modified version.
// See http://www.ogre3d.org/wiki/index.php/Caelum for the original version.
// 
// Copyright (c) 2008-2009 Association Hat. See Contributors.txt for details.
// 
// Caelum for NeoAxis Engine is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published
// by the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Caelum for NeoAxis Engine is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License
// along with Caelum for NeoAxis Engine. If not, see <http://www.gnu.org/licenses/>.
// 

vertex_program CaelumLayeredCloudsVP cg
{
	source Caelum\Clouds\CaelumLayeredClouds.cg
	entry_point LayeredClouds_vp
	profiles vs_2_0 arbvp1
	//compile_arguments -posinv
	
	default_params
	{
		param_named_auto worldViewProj worldviewproj_matrix
		param_named sunDirection float3 -1 -1 0
	}
}

fragment_program CaelumLayeredCloudsFP cg
{
	source Caelum\Clouds\CaelumLayeredClouds.cg
    entry_point LayeredClouds_fp
    profiles ps_2_0 arbfp1

    default_params
    {
        // Caelum sky properties
        param_named sunColour float4 1 1 1 1
        
        // Fog colour; used as the base cloud colour.
        param_named fogColour float4 0 0 0 0
        
        
        // The inverse of the cloud forms scale
        param_named cloudMassInvScale float 1.2
        // The inverse of the cloud details scale
        param_named cloudDetailInvScale float 4.8
        
        // Cloud mass offset
        param_named cloudMassOffset float2 0 0
        // Cloud details offset
        param_named cloudDetailOffset float2 0.5 0.5
        
        // Blending factor between Cloud1 and Cloud2
        param_named cloudMassBlend float 0.9
        // Cloud detail weight.
        param_named cloudDetailBlend float 0.5
        
        
        // Cloud coverage, between 0 and 1
        param_named cloudCoverageThreshold float 0.9

        // Cloud sharpness. Lower values result in softer clouds.
        param_named cloudSharpness float 4
        
        // Cloud thickness. Bigger values results in darker clouds.
        param_named cloudThickness float 3
        
    }
}

material CaelumLayeredClouds
{
	technique
	{
		pass
		{
			lighting off
			depth_check off                                     
			depth_write off
			scene_blend alpha_blend
			fog_override true

			vertex_program_ref CaelumLayeredCloudsVP
			{
			}
			
			fragment_program_ref CaelumLayeredCloudsFP
			{
			}

			texture_unit Cloud1
			{
				anim_texture Caelum\Clouds\noise1.png Caelum\Clouds\noise2.png Caelum\Clouds\noise3.png Caelum\Clouds\noise4.png 600
			}
			
			texture_unit Cloud2
			{
				anim_texture Caelum\Clouds\noise2.png Caelum\Clouds\noise3.png Caelum\Clouds\noise4.png Caelum\Clouds\noise1.png 600
			}
			
			texture_unit Detail
			{
				texture Caelum\Clouds\noise4.png
			}
		}
	}
	
	technique
	{
		pass
		{
			lighting off
			depth_check off                                     
			depth_write off
			scene_blend colour_blend
			fog_override true

			texture_unit Cloud1
			{
				anim_texture Caelum\Clouds\noise1.png Caelum\Clouds\noise2.png Caelum\Clouds\noise3.png Caelum\Clouds\noise4.png 600
				scale 1.2 1.2
			}
			
			texture_unit Cloud2
			{
				anim_texture Caelum\Clouds\noise2.png Caelum\Clouds\noise3.png Caelum\Clouds\noise4.png Caelum\Clouds\noise1.png 600
				scale 1.2 1.2
				colour_op_ex blend_manual src_texture src_current 0.5
			}

			texture_unit Detail
			{
				texture Caelum\Clouds\noise1.png
				colour_op_ex modulate src_manual src_current 0.1 0.1 0.1
			}
		}
	}
}
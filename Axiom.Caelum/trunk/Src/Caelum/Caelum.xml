<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Caelum</name>
    </assembly>
    <members>
        <member name="T:Caelum.EnumListBoxEditor">
            <summary>
            Draws a CheckedListBox which allows to tick some values
            from a enum (flags).
            </summary>
        </member>
        <member name="M:Caelum.EnumListBoxEditor.EnumContainsValue(System.Type,System.Object,System.Object)">
            <summary>
            Sets if a value is contained in an other enum value
            whose the type is specified type.</summary>
            <param name="enumType">Enum type</param>
            <param name="enumValue">Value with type enumType</param>
            <param name="value">Value wanted</param>
            <returns>True if the value is contained in enumValue, else returns false</returns>
        </member>
        <member name="T:Caelum.CaelumComponent">
            <summary>
            Contains all Caelum's types. A flag is
            set to allow <c>EnumListBoxEditor</c> creation.</summary>
        </member>
        <member name="T:Caelum.CaelumItem">
            <summary>
            Describes an element of caelum which can be created
            in the world.</summary>
        </member>
        <member name="M:Caelum.CaelumItem.IsContainType(Caelum.CaelumComponent)">
            <summary>
            Checks if this element describes a type of caelum.</summary>
            <remarks>An element can describe more than one type.</remarks>
            <param name="type">The type to search</param>
            <returns>Returns true if this element contains 
            <paramref name="type"/>, else returns false</returns>
        </member>
        <member name="M:Caelum.CaelumItem.IsContainType(Caelum.CaelumComponent,Caelum.CaelumComponent)">
            <summary>
            Checks if an item describes a type of caelum.</summary>
            <remarks>An item can describe more than one type.</remarks>
            <param name="item">The item which may contain <paramref name="type"/></param>
            <param name="type">The type to search</param>
            <returns>Returns true if this item contains</returns>
        </member>
        <member name="T:Caelum.CaelumUtils">
            <summary>
            Defines some math tools. It also make all necessary 
            conversion for NAE (I prefer use Yaxis as UpAxis).</summary>
        </member>
        <member name="F:Caelum.CaelumUtils.XAxis">
            Wraps OgreAxis to NAE axis
            So YAxis is the up axis and ZAxis is the deep axis
        </member>
        <member name="F:Caelum.CaelumUtils.ColorWhite">
            Wraps some Colors to NAE
            @note: ColorBlack is equal to ColorValue.Zero
        </member>
        <member name="M:Caelum.CaelumUtils.GenerateQuat(Engine.MathEx.Vec3,Engine.MathEx.Degree)">
            <summary>
            Generates a quaternion from an axis and an Euler's angle in degrees.</summary>
            <param name="axis">The axis of the rotation</param>
            <param name="angle">An Euler's angle in degrees</param>
        </member>
        <member name="M:Caelum.CaelumUtils.GenerateQuat(Engine.MathEx.Vec3,Engine.MathEx.Radian)">
            <summary>
            Generates a quaternion from an axis and an Euler's angle in radians.</summary>
            <param name="axis">The axis of the rotation</param>
            <param name="angle">An Euler's angle in Radian</param>
        </member>
        <member name="T:Caelum.UniversalClock">
            <summary>
            The system's time model.
            This class is responsible of keeping track of the current time, transform it to the system's time model, 
            and return the values associated (time of day, day of year...)</summary>
        </member>
        <member name="F:Caelum.UniversalClock.mJulianDayBase">
            <summary>
            Astronomical julian day at mCurrentTime = 0;</summary>
        </member>
        <member name="F:Caelum.UniversalClock.mCurrentTime">
            <summary>
            Seconds since mJulianDayBase.</summary>
        </member>
        <member name="F:Caelum.UniversalClock.mLastTime">
            <summary>
            Seconds since mJulianDayBase at last update.</summary>
        </member>
        <member name="M:Caelum.UniversalClock.getJulianSecondDifference">
            <summary>
            Gets the difference in seconds between this and the last update.
            This is what you want for per-frame updates.</summary>
        </member>
        <member name="M:Caelum.UniversalClock.SetGregorianDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Sets the current time as a gregorian date.
            This is here as an easy to use function.</summary>
        </member>
        <member name="M:Caelum.UniversalClock.Update(System.Boolean,System.Single)">
            <summary>
            Updates the clock.</summary>
            <remarks> The time to be added to the clock is automatically
            calculated from the system clock. This will be affected 
            by the time scale.</remarks>
        </member>
        <member name="P:Caelum.UniversalClock.JulianDay">
            <summary>
            The current time as a julian day.</summary>
        </member>
        <member name="T:Caelum.CaelumSkydome">
            <summary>
             Class for skydome.</summary>
            <remarks>This is tighly integrated with CG script and Skydome.material.</remarks>
        </member>
        <member name="T:Caelum.CaelumBaseMesh">
            <summary>
            Describes a base class for all elements of caelum wich are rendered with a mesh.
            </summary>
        </member>
        <member name="T:Caelum.CaelumBase">
            <summary>
            Describes a base class for all elements of caelum.</summary>
        </member>
        <member name="M:Caelum.CaelumBase.Dispose">
            <summary>
            Disposes all resources used by this element.</summary>
        </member>
        <member name="M:Caelum.CaelumBase.Update(System.Single,Engine.Renderer.Camera)">
            <summary>
            Updates Caelum's calculations. Is necessary for a correct render.</summary>
            <param name="time">The relative day time.</param>
            <param name="cam">The main camera used for the render.</param>
        </member>
        <member name="M:Caelum.CaelumBaseMesh.Initialise(Engine.Renderer.RenderQueueGroupID,System.String,Engine.MathEx.Vec3,Engine.MathEx.Vec3,Engine.MathEx.Vec3)">
            <summary>
            Creates the element in the world. It automatically
            sets up the mesh and the node.</summary>
        </member>
        <member name="P:Caelum.CaelumBaseMesh.MainMaterial">
            <summary>
            Gets the main node's material.</summary>
            <remarks>Returns null if there isn't material</remarks>
        </member>
        <member name="T:Caelum.CaelumMoon">
            <summary>
            Class representing the moon.</summary>
        </member>
        <member name="T:Caelum.CaelumBaseSkyLight">
            <summary>
            Describes a base class for all elements of caelum wich are rendered with a 
            billboard and wich are a source of light.</summary>
        </member>
        <member name="M:Caelum.CaelumBaseSkyLight.Initialise(Engine.Renderer.RenderQueueGroupID,System.String,Engine.MathEx.Vec3)">
            <summary>
            Creates the element in the world. It automatically
            sets up the mesh and the node.</summary>
        </member>
        <member name="M:Caelum.CaelumBaseSkyLight.setBodyColor(Engine.MathEx.ColorValue)">
            <summary>
            Sets the billboard body color.</summary>
        </member>
        <member name="M:Caelum.CaelumBaseSkyLight.setLighting(Engine.MathEx.ColorValue,Engine.MathEx.Vec3)">
            <summary>
            Sets up the directional lightning</summary>
            <param name="color">The color of the light</param>
            <param name="direction">The direction of the light</param>
        </member>
        <member name="P:Caelum.CaelumBaseSkyLight.MainMaterial">
            <summary>
            Gets the main node's material.</summary>
            <remarks>Returns null if there isn't material</remarks>
        </member>
        <member name="P:Caelum.CaelumBaseSkyLight.FarDistance">
            <summary>
            The distance used to orbiting.</summary>
        </member>
        <member name="T:Caelum.SolarSystemModel">
            <summary>
            Class which calculates sun and moon positions on the sky. 
            Most of the calculations are done in the astronomy class.</summary>
        </member>
        <member name="M:Caelum.SolarSystemModel.GetSunDirection">
            <summary>
            Returns the updated sun's position.</summary>
        </member>
        <member name="M:Caelum.SolarSystemModel.GetMoonDirection">
            <summary>
            Returns the updated moon's position.</summary>
        </member>
        <member name="M:Caelum.SolarSystemModel.GetMoonPhase">
            <summary>
            Fake function to get the phase of the moon</summary>
            <remarks>The calculations performed by this function are completely fake.
            It's a triangle wave with a period of 28.5 days.</remarks>
            <returns>The phase of the moon; ranging from 0(full moon) to 2(new moon).</returns>
        </member>
        <member name="T:Caelum.CaelumStarfield">
            <summary>
            Class for starfield.</summary>
        </member>
        <member name="T:Caelum.CaelumClouds">
            <summary>
            Class for layered clouds.</summary>
            <remarks>This is tighly integrated with CaelumShaders.cg and LayeredClouds.material.
            There are two "cloud mass" layers blended to create animating clouds and an extra
            detailLayer.
            Most of the parameters in this class are direct wrappers from GPU shader params.
            Cloud offsets and speeds are not in any meaningful world units. Maybe they should
            be in radians or something?</remarks>
        </member>
        <member name="F:Caelum.CaelumClouds.mCloudMassBlend">
            <summary>
            Current cloud blend factor.</summary>
        </member>
        <member name="F:Caelum.CaelumClouds.mCloudMassOffset">
            <summary>
            Current cloud layer offset.</summary>
        </member>
        <member name="F:Caelum.CaelumClouds.mCloudDetailOffset">
            <summary>
            Current cloud detail layer offset.</summary>
        </member>
        <member name="F:Caelum.CaelumClouds.mCoverLookupImage">
            <summary>
            Lookup used for cloud coverage.</summary>
        </member>
        <member name="M:Caelum.CaelumClouds.#ctor(Caelum.CaelumItem)">
            <summary>
            Creates the element in the world. It automatically
            sets up the mesh and the node with the infos in <paramref name="Item"/></summary>.
            <param name="item">Describes the element and all necessary infos</param>
        </member>
        <member name="M:Caelum.CaelumClouds.SetCoverImage(System.String)">
            <summary>
            Sets the bitmap which will be used to coverage's calculation.</summary>
            <param name="virtualImageName">The virtual path of the bitmap</param>
            <example>setCoverImage(Caelum\Clouds\CloudCoverLookup.png)</example>
        </member>
        <member name="M:Caelum.CaelumClouds.SetCloudMassBlend(System.Single)">
            <summary>
            Sets the current blending factor between the two cloud mass layers.</summary>
            <param name="massBlend"></param>
        </member>
        <member name="M:Caelum.CaelumClouds.SetCloudMassOffset(Engine.MathEx.Vec2)">
            <summary>
            Sets the current offset(translation) of the cloud mass on the sky.</summary>
        </member>
        <member name="M:Caelum.CaelumClouds.SetCloudDetailOffset(Engine.MathEx.Vec2)">
            <summary>
            Sets current offset(translation) of cloud details on the sky.</summary>
        </member>
        <member name="M:Caelum.CaelumClouds.UpdateSunDirection">
            <summary>
            Calculs and sends the current direction of the sun to Cg script.</summary>
        </member>
        <member name="M:Caelum.CaelumClouds.UpdateSunColor">
            <summary>
            Calculs and sends the current color of the sun's light to Cg script.</summary>
        </member>
        <member name="M:Caelum.CaelumClouds.UpdateFogColor">
            <summary>
            Calculs and sends the current fog's color to Cg script.</summary>
        </member>
        <member name="M:Caelum.CaelumClouds.GetFpParams">
            <summary>
            Shortcut function for fragment program parameters.</summary>
            <remarks>Doesn't check if there is a material, can throws an exception.</remarks>
        </member>
        <member name="M:Caelum.CaelumClouds.GetVpParams">
            <summary>
            Shortcut function for vertex program parameters.</summary>
            <remarks>Doesn't check if there is a material, can throws an exception.</remarks>
        </member>
        <member name="M:Caelum.CaelumClouds.GetTUS(System.UInt16)">
            <summary>
            Shortcut function for texture unit state parameters</summary>
            <remarks>Doesn't check if there is a material, can throws an exception.</remarks>
        </member>
        <member name="T:Caelum.ImageHelper">
            <summary>
            Defines some bitmap tools</summary>
        </member>
        <member name="M:Caelum.ImageHelper.GetInterpolatedColour(System.Single,System.Single,System.Drawing.Bitmap,System.Boolean)">
            <summary>
            Gets the interpolated colour between two pixels from an image.
            Interpolate a texture pixel by hand. (fx, fy) are in texture coordinates,
            ranging [0-1] across the entire texture.
            Smooth blending is only done on the x coordinate.
            Wrapping is only supported on X as well.</summary>
        </member>
        <member name="T:Caelum.CaelumManagerType">
            <summary>
            Root of the Caelum system.
            Caelum is built from several classes for different sky elements (the sun,
            clouds, etc). This class is responsible for tracking and 
            updating sub-components.
            All parameters set in the Map Editor are retrieved in this unique
            class.</summary>
            <remarks>It can be a better way to make all components
            independants but it's also difficult to manage with too many
            entity in the Map Editor. Maybe finding a better way to set up all
            components will clean up the code and avoid some memory gaps.</remarks>
        </member>
        <member name="P:Caelum.CaelumManagerType.ComponentsToCreate">
            <summary>
            Describes all components which will be created in the world.</summary>
        </member>
        <member name="P:Caelum.CaelumManagerType.CaelumItems">
            <summary>
            Describes all components' parameters which will be created 
            in the world. If there isn't any parameters the component
            won't be created.</summary>
        </member>
        <member name="P:Caelum.CaelumManagerType.FarDistance">
            <summary>
            The distance used to sun and moon orbiting.</summary>
        </member>
        <member name="P:Caelum.CaelumManagerType.GradientImage">
            <summary>
            The image's virtual path used to calculate sun color.</summary>
        </member>
        <member name="P:Caelum.CaelumManagerType.SkyGradientImage">
            <summary>
            The sky color gradients image's name.</summary>
        </member>
        <member name="P:Caelum.CaelumManagerType.CoverLookupImage">
            <summary>
            Sets the image used to lookup the cloud coverage threshold.
            This image is used to calculate the cloud coverage threshold
            based on the desired cloud cover.</summary>
        </member>
        <member name="M:Caelum.CaelumManager.OnPostCreate(System.Boolean)">
            <summary>
            Creates all Caelum's components needed,
            register them in <c>mChildren</c> and sets up them.
            </summary>
        </member>
        <member name="M:Caelum.CaelumManager.getItembyType(Caelum.CaelumComponent)">
            <summary>
            A shortcut function to get parameters by type.</summary>
        </member>
        <member name="P:Caelum.CaelumManager.ObserverLatitude">
            <summary>
            The observer's latitude. North is positive, south is negative.</summary>
        </member>
        <member name="P:Caelum.CaelumManager.ObserverLongitude">
            <summary>
            The observer's latitude. North is positive, south is negative.</summary>
        </member>
        <member name="P:Caelum.CaelumManager.ManageAmbientLight">
            <summary>
            Enables/disables Caelum managing ambient light.</summary>
        </member>
        <member name="P:Caelum.CaelumManager.CastShadows">
            <summary>
            Enables/disables Caelum casting shadows.</summary>
        </member>
        <member name="P:Caelum.CaelumManager.DiffuseMultiplier">
            <summary>
            The diffuse multiplier for light colour</summary>
        </member>
        <member name="P:Caelum.CaelumManager.SpecularMultiplier">
            <summary>
            The specular multiplier for light colour</summary>
        </member>
        <member name="P:Caelum.CaelumManager.AmbientMultiplier">
            <summary>
            The ambient multiplier for light colour</summary>
        </member>
        <member name="P:Caelum.CaelumManager.MinAmbientLight">
            <summary>
            The minimal value for ambient light colour. It's 
            useful when it's night to avoid gettting a black map.</summary>
        </member>
        <member name="P:Caelum.CaelumManager.StarFieldInclination">
            <summary>
            The inclination of the starfield to UpAxis in degrees</summary>
        </member>
        <member name="P:Caelum.CaelumManager.CloudCover">
            <summary>
            The clouds' cover, between 0 (completely clear) and 1 (completely covered).
            It's used to calculate the clouds' coverage threshold.</summary>
        </member>
        <member name="P:Caelum.CaelumManager.AnimatedClouds">
            <summary>
            Switch internal clouds' animation on/off</summary>
        </member>
        <member name="P:Caelum.CaelumManager.CloudsBlendTime">
            <summary>
            The time it takes to blend two clouds shaped together, in seconds.</summary>
        </member>
        <member name="P:Caelum.CaelumManager.CloudsSpeed">
            <summary>
            The clouds' movements speed.</summary>
        </member>
        <member name="P:Caelum.CaelumManager.FogDensityMultiplier">
            <summary>
            The global fog's density multiplier.</summary>
        </member>
        <member name="P:Caelum.CaelumManager.TimeScale">
            <summary>
            The relative time scale. If negative, time will move backwards; 
            2.0 means double speed...</summary>
        </member>
        <member name="P:Caelum.CaelumManager.LensFlareEffect">
            <summary>
            Enables/disables the lens flare effect.</summary>
        </member>
        <member name="T:Caelum.Astronomy">
             <summary>
             Static class with astronomy routines.
             This class contains various astronomical routines useful in Caelum.
            
             Most of the formulas are from http://stjarnhimlen.se/comp/ppcomp.html
             That site contains much more than was implemented here; it has code
             for determining the positions of all the planets. Only the sun and
             moon are actually useful for caelum.
            
             The formulas are isolated here in pure procedural code for easier
             testing.
            
             All angles are in degrees unless otherwise mentioned.</summary>
        </member>
        <member name="F:Caelum.Astronomy._MCW_PC">
            <summary>
            Defines floating precision modes.</summary>
        </member>
        <member name="M:Caelum.Astronomy._controlfp(System.Int32,System.Int32)">
            <summary>
            Imports function to allow a better floating point precision mode.</summary>
        </member>
        <member name="M:Caelum.Astronomy.NormalizeDegrees(System.Double)">
            <summary>
            Normalizes an angle to the 0, 360 range.</summary>
        </member>
        <member name="M:Caelum.Astronomy.RadToDeg(System.Double)">
            <summary>
            Converts radians to degrees.</summary>
        </member>
        <member name="M:Caelum.Astronomy.DegToRad(System.Double)">
            <summary>
            Converts degrees to radians.</summary>
        </member>
        <member name="M:Caelum.Astronomy.SinDeg(System.Double)">
            <summary>
            Gets sinus from a angle in degrees.</summary>
        </member>
        <member name="M:Caelum.Astronomy.CosDeg(System.Double)">
            <summary>
            Gets cosinus from a angle in degrees.</summary>
        </member>
        <member name="M:Caelum.Astronomy.Atan2Deg(System.Double,System.Double)">
            <summary>
            Gets aTan from two angles in degrees.</summary>
        </member>
        <member name="M:Caelum.Astronomy.ConvertEclipticToEquatorialRad(System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Converts from ecliptic to equatorial spherical coordinates, in radians.</summary>
            <param name="lon">Ecliptic longitude</param>
            <param name="lat">Ecliptic latitude</param>
            <param name="rasc">Right ascension</param>
            <param name="decl">Declination</param>
        </member>
        <member name="M:Caelum.Astronomy.ConvertEquatorialToHorizontal(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Converts from equatorial to horizontal coordinates.
            This function converts from angles relative to the earth's equator
            to angle relative to the horizon at a given point.</summary>
            <param name="jday">Astronomical time as julian day.</param>
            <param name="longitude">Observer's longitude in degrees east.</param>
            <param name="latitude">Observer's latitude in degrees north.</param>
            <param name="rasc">Object's right ascension.</param>
            <param name="decl">Object's declination.</param>
            <param name="azimuth">Object's azimuth (clockwise degrees from true north).</param>
            <param name="altitude">Object's altitude (degrees above the horizon).</param>
        </member>
        <member name="M:Caelum.Astronomy.GetHorizontalSunPosition(System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Gets the sun's position in the sky in, relative to the horizon.</summary>
            <param name="jday"> Astronomical time as julian day.</param>
            <param name="longitude">Observer's longitude</param>
            <param name="latitude">Observer's latitude</param>
            <param name="azimuth">Astronomical azimuth, measured clockwise from North = 0.</param>
            <param name="altitude">Astronomical altitude, elevation above the horizon.</param>
        </member>
        <member name="M:Caelum.Astronomy.GetEclipticMoonPositionRad(System.Double,System.Double@,System.Double@)">
            <summary> 
            Gets the moon position at a specific time in ecliptic coordinates.</summary>
            <param name="lon">Ecliptic longitude, in radians.</param>
            <param name="lat">Ecliptic latitude, in radians.</param>
            <param name="jday">Astronomical time as julian day.</param>
        </member>
        <member name="M:Caelum.Astronomy.GetJulianDayFromGregorianDate(System.Int32,System.Int32,System.Int32)">
            <summary>Gets astronomical julian day from normal gregorian calendar.
            From wikipedia: the integer number of days that have elapsed
            since the initial epoch defined as
            noon Universal Time (UT) Monday, January 1, 4713 BC.</summary>
            <remarks>This is the time at noon, not midnight.</remarks>
        </member>
        <member name="M:Caelum.Astronomy.GetJulianDayFromGregorianDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Gets astronomical julian day from normal gregorian calendar.
            Calculates julian day from a day in the normal gregorian calendar.
            Time should be given as UTC.
            http://en.wikipedia.org/wiki/Julian_day</summary>
        </member>
        <member name="M:Caelum.Astronomy.GetJulianDayFromGregorianDateTime(System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Gets astronomical julian day from normal gregorian calendar.</summary>
        </member>
        <member name="M:Caelum.Astronomy.GetGregorianDateFromJulianDay(System.Int32,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Gets gregorian date from integer julian day.</summary>
        </member>
        <member name="M:Caelum.Astronomy.GetGregorianDateTimeFromJulianDay(System.Double,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Double@)">
            <summary>
            Gets gregorian date time from doubleing point julian day.</summary>
        </member>
        <member name="M:Caelum.Astronomy.GetGregorianDateFromJulianDay(System.Double,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Gets gregorian date from doubleing point julian day.</summary>
        </member>
        <member name="M:Caelum.Astronomy.EnterHighPrecissionFloatingPointMode">
            <summary>
            Enter high-precission floating-point mode.</summary>
            <remarks>Must be paired with restoreFloatingPointMode.</remarks>
            <returns>Value to pass to restoreFloatingModeMode.</returns>
        </member>
        <member name="M:Caelum.Astronomy.RestoreFloatingPointMode(System.Int32)">
            <summary>
            Restore old floating point precission.</summary>
        </member>
        <member name="T:Caelum.SkyColorModel">
            <summary>
            Class which returns various sky colours.</summary>
        </member>
        <member name="M:Caelum.SkyColorModel.GetSunColor">
            <summary>
            Gets the colour of the sun sphere.
            This colour is used to draw the sun sphere in the sky.</summary>
        </member>
        <member name="M:Caelum.SkyColorModel.GetSunLight">
            <summary>
            Gets the colour of sun light.
            This color is used to illuminate the scene.</summary>
        </member>
        <member name="M:Caelum.SkyColorModel.GetMoonBodyColour">
            <summary>
            Gets the colour of moon's body.</summary>
        </member>
        <member name="M:Caelum.SkyColorModel.GetMoonLight">
            <summary>
            Gets the colour of moon's light.
            This color is used to illuminate the scene.</summary>
        </member>
        <member name="M:Caelum.SkyColorModel.GetFogColor">
            <summary>
            Gets the fog colour for a certain daytime.</summary>
        </member>
        <member name="M:Caelum.SkyColorModel.GetFogDensity">
            <summary>
            Gets the fog density for a certain daytime.</summary>
        </member>
        <member name="M:Caelum.SkyColorModel.GetBMPFromPath(System.String)">
            <summary>
            Gets a bitmap from his virtual path</summary>
        </member>
        <member name="P:Caelum.SkyColorModel.GradientImage">
            <summary>
            Sets the name of the image used to calculate sun color</summary>
        </member>
        <member name="P:Caelum.SkyColorModel.SkyGradientImage">
            <summary>
            Sets the sky color gradients image's name.</summary>
        </member>
        <member name="T:Caelum.CaelumSun">
            <summary>
            Class representing the sun.</summary>
        </member>
        <member name="M:Caelum.CaelumSun.SetAmbientLight(Engine.MathEx.ColorValue)">
            <summary>
            Sets the sunlight colour used as ambient light.</summary>
        </member>
    </members>
</doc>
